
        if(itemStack.getType().equals(Material.STICK)){
            if(action == Action.RIGHT_CLICK_BLOCK || action == Action.RIGHT_CLICK_AIR){
                event.setCancelled(true);

                int cooldownTime = 5;
                if(cooldowns.containsKey(player.getUniqueId())){
                    long secondsLeft = ((cooldowns.get(player.getUniqueId())/1000) + cooldownTime) - (System.currentTimeMillis()/1000);

                    if(secondsLeft > 0){
                        player.sendMessage(ChatColor.RED + "Vous devez attendre " + secondsLeft + ChatColor.RESET + ChatColor.RED + " secondes avant de pouvoir rÃ©utiliser ce sort.");
                        return;
                    }
                }

                player.getNearbyEntities(4, 2, 4).forEach(entities -> {
                    if(entities instanceof final LivingEntity livingEntity){
                        livingEntity.damage(7);
                        livingEntity.setVelocity(livingEntity.getLocation().toVector().subtract(player.getLocation().toVector()).multiply(0.6F));
                        player.spawnParticle(Particle.EXPLOSION_NORMAL, player.getLocation(), 1);
                    }
                });

                cooldowns.put(player.getUniqueId(), System.currentTimeMillis());
            }
        }

                            case "RLRL" -> {
                                if(manaLeft < 100){
                                    player.spigot().sendMessage(ChatMessageType.ACTION_BAR, new TextComponent(ChatColor.RED + "Vous avez besoins de " + ChatColor.BOLD + (100 - manaLeft) + ChatColor.RESET + ChatColor.RED + " mana pour utiliser ce sort."));
                                    return;
                                }

                                this.mana.put(player.getUniqueId(), manaLeft - 100);

                                final Location location = player.getTargetBlock(null, 100).getLocation();

                                new BukkitRunnable(){
                                    int strikes = 3;

                                    /**
                                     * Runs this operation.
                                     */
                                    @Override
                                    public void run() {
                                        final Location[] locations = new Location[3];

                                        for(int i = 0; i < 3; i++){
                                            double x = Math.random() * 6, z = Math.random() * 6;

                                            if(Math.random() > 0.5){
                                                x *= -1;
                                            }

                                            if(Math.random() > 0.5){
                                                z *= -1;
                                            }
                                            locations[i] = location.clone().add(x, 0, z);
                                        }

                                        Arrays.stream(locations).forEach(location -> {
                                            location.getWorld().strikeLightning(location);
                                            location.getWorld().spawnParticle(Particle.FLASH, location, 1);
                                        });

                                        strikes -= 1;
                                        if(strikes == 0){
                                            cancel();
                                        }
                                    }
                                }.runTaskTimer(this.instance, 0L, 6L);
                            }